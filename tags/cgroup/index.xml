<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Cgroup - 标签 - pigLoveRabbit的网站</title><link>https://example.com/tags/cgroup/</link><description>Cgroup - 标签 - pigLoveRabbit的网站</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 28 Nov 2019 16:10:00 +0000</lastBuildDate><atom:link href="https://example.com/tags/cgroup/" rel="self" type="application/rss+xml"/><item><title>一步步自己做个Docker之Linux Namespace 简介</title><link>https://example.com/docker-linux-namespace-intro/</link><pubDate>Thu, 28 Nov 2019 16:10:00 +0000</pubDate><author>Salamander</author><guid>https://example.com/docker-linux-namespace-intro/</guid><description><![CDATA[<p></p>
<p>本文环境：</p>
<ul>
<li>OS：Ubuntu 18.04.3 LTS</li>
<li>内核版本： 5.0.0-36-generic</li>
</ul>
<h2 id="linux-namespaces">Linux Namespaces</h2>
<p>Docker的所用的两个关键技术，一个是<code>Namespaces</code>，一个是<code>Cgroups</code>。它俩都不是新技术，Linux内核很早就支持，但是Docker把它们有机地结合起来，加上自己创新，使得现在容器技术非常流行。<br>
<code>Linux Namespaces</code>其实是做到了进程之间全局资源的隔离，譬如，<code>UTS Namespace</code>隔离了Hostname空间。这意味着在新的<code>UTS Namespace</code>中的进程，可以拥有不同于宿主机的主机名。</p>]]></description></item></channel></rss>